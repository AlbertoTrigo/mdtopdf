#!/bin/sh

# Function to perform the main conversion using Pandoc
Convert() {
    pandoc "$input" \
    -V linkcolor:blue \
    -V geometry:"$papersize" \
    -V geometry:margin=2cm \
    -V papersize:"$papersize" \
    -V documentclass:article \
    -V fontsize:"$fontsize" \
    -V mainfont:"$mainfont" \
    -V monofont:"$monofont" \
    --pdf-engine=xelatex \
    -o "$output"
}

# Function to display help menu
Help()
{
    echo "Script to transform markdown files into pdf using Pandoc."
    echo "Syntax: mdtopdf [OPTION]... FILE"
    echo "Options:"
    echo "     -h     Display this Help."
    echo "     -o     Output file name."
    echo "     -f     Font family."
    echo "     -s     Font size."
    echo "     -m     Monospaced font family."
    echo "     -p     Paper size (default: a4)."
    echo "     -r     Execute recursively in a directory."
}

# Function to validate file extension and existence
ValidateInput() {
    if [ "${input##*.}" != "md" ] || [ ! -f "$input" ]; then
        Help
        exit 1
    fi
}

# Initialize default variables
fontsize=12pt
mainfont="Times New Roman"
monofont="Courier New"
papersize=a4

# Parse options
while getopts ":f:o:s:m:p:r:h" option; do
    case $option in
        h) Help; exit;;
        s) fontsize=$OPTARG;;
        f) mainfont=$OPTARG;;
        m) monofont=$OPTARG;;
        o) output=$OPTARG;;
        p) papersize=$OPTARG;;
        r) directory=$OPTARG
           for input in $directory/*.md; do
               output="${input%.md}.pdf"
               Convert
           done
           exit;;
        *) Help; exit;;
    esac
done

# Get the input file from the last argument
input="${!OPTIND}"

# Validate the input file
ValidateInput

# Set the output file name if not already set
[ -z "$output" ] && output="${input%.md}.pdf"

# Perform the conversion
Convert

